/*
 * bicubic.cpp
 *
 *  Created on: May 9, 2018
 *      Author: dmarce1
 */

#include "bicubic.hpp"
#include <cmath>

constexpr real W[16][16] =
		{ { 0.00390625, -0.03515625, -0.03515625, 0.00390625, -0.03515625,
				0.31640625, 0.31640625, -0.03515625, -0.03515625, 0.31640625,
				0.31640625, -0.03515625, 0.00390625, -0.03515625, -0.03515625,
				0.00390625 }, { -0.0026041666666666665, 0.0234375, 0.0234375,
				-0.0026041666666666665, 0.0703125, -0.6328125, -0.6328125,
				0.0703125, -0.0703125, 0.6328125, 0.6328125, -0.0703125,
				0.0026041666666666665, -0.0234375, -0.0234375,
				0.0026041666666666665 }, { -0.015625, 0.140625, 0.140625,
				-0.015625, 0.015625, -0.140625, -0.140625, 0.015625, 0.015625,
				-0.140625, -0.140625, 0.015625, -0.015625, 0.140625, 0.140625,
				-0.015625 }, { 0.010416666666666666, -0.09375, -0.09375,
				0.010416666666666666, -0.03125, 0.28125, 0.28125, -0.03125,
				0.03125, -0.28125, -0.28125, 0.03125, -0.010416666666666666,
				0.09375, 0.09375, -0.010416666666666666 }, {
				-0.0026041666666666665, 0.0703125, -0.0703125,
				0.0026041666666666665, 0.0234375, -0.6328125, 0.6328125,
				-0.0234375, 0.0234375, -0.6328125, 0.6328125, -0.0234375,
				-0.0026041666666666665, 0.0703125, -0.0703125,
				0.0026041666666666665 },
				{ 0.001736111111111111, -0.046875, 0.046875,
						-0.001736111111111111, -0.046875, 1.265625, -1.265625,
						0.046875, 0.046875, -1.265625, 1.265625, -0.046875,
						-0.001736111111111111, 0.046875, -0.046875,
						0.001736111111111111 }, { 0.010416666666666666,
						-0.28125, 0.28125, -0.010416666666666666,
						-0.010416666666666666, 0.28125, -0.28125,
						0.010416666666666666, -0.010416666666666666, 0.28125,
						-0.28125, 0.010416666666666666, 0.010416666666666666,
						-0.28125, 0.28125, -0.010416666666666666 }, {
						-0.006944444444444444, 0.1875, -0.1875,
						0.006944444444444444, 0.020833333333333332, -0.5625,
						0.5625, -0.020833333333333332, -0.020833333333333332,
						0.5625, -0.5625, 0.020833333333333332,
						0.006944444444444444, -0.1875, 0.1875,
						-0.006944444444444444 }, { -0.015625, 0.015625,
						0.015625, -0.015625, 0.140625, -0.140625, -0.140625,
						0.140625, 0.140625, -0.140625, -0.140625, 0.140625,
						-0.015625, 0.015625, 0.015625, -0.015625 }, {
						0.010416666666666666, -0.010416666666666666,
						-0.010416666666666666, 0.010416666666666666, -0.28125,
						0.28125, 0.28125, -0.28125, 0.28125, -0.28125, -0.28125,
						0.28125, -0.010416666666666666, 0.010416666666666666,
						0.010416666666666666, -0.010416666666666666 }, { 0.0625,
						-0.0625, -0.0625, 0.0625, -0.0625, 0.0625, 0.0625,
						-0.0625, -0.0625, 0.0625, 0.0625, -0.0625, 0.0625,
						-0.0625, -0.0625, 0.0625 }, { -0.041666666666666664,
						0.041666666666666664, 0.041666666666666664,
						-0.041666666666666664, 0.125, -0.125, -0.125, 0.125,
						-0.125, 0.125, 0.125, -0.125, 0.041666666666666664,
						-0.041666666666666664, -0.041666666666666664,
						0.041666666666666664 }, { 0.010416666666666666,
						-0.03125, 0.03125, -0.010416666666666666, -0.09375,
						0.28125, -0.28125, 0.09375, -0.09375, 0.28125, -0.28125,
						0.09375, 0.010416666666666666, -0.03125, 0.03125,
						-0.010416666666666666 }, { -0.006944444444444444,
						0.020833333333333332, -0.020833333333333332,
						0.006944444444444444, 0.1875, -0.5625, 0.5625, -0.1875,
						-0.1875, 0.5625, -0.5625, 0.1875, 0.006944444444444444,
						-0.020833333333333332, 0.020833333333333332,
						-0.006944444444444444 }, { -0.041666666666666664, 0.125,
						-0.125, 0.041666666666666664, 0.041666666666666664,
						-0.125, 0.125, -0.041666666666666664,
						0.041666666666666664, -0.125, 0.125,
						-0.041666666666666664, -0.041666666666666664, 0.125,
						-0.125, 0.041666666666666664 }, { 0.027777777777777776,
						-0.08333333333333333, 0.08333333333333333,
						-0.027777777777777776, -0.08333333333333333, 0.25,
						-0.25, 0.08333333333333333, 0.08333333333333333, -0.25,
						0.25, -0.08333333333333333, -0.027777777777777776,
						0.08333333333333333, -0.08333333333333333,
						0.027777777777777776 } };

real rand1() {
	return (std::rand() + real(0.5)) / (real(RAND_MAX) + real(1));
}

bicubic_table::bicubic_table(const std::function<real(real, real)>& func,
		real _xmin, real _xmax, real _ymin, real _ymax, real toler,
		const char* filename) :
		xmin(_xmin), xmax(_xmax), ymin(_ymin), ymax(_ymax), NX(), NY(), C() {
	printf("%e %e %e %e\n", xmin, xmax, ymin, ymax);
	int nx = 4;
	int ny = 4;
	real err;
	bicubic_table table(func, xmin, xmax, ymin, ymax, nx, ny);
	err = table.Linf;
	do {
		bicubic_table test_x(func, xmin, xmax, ymin, ymax, 2 * nx, ny);
		bicubic_table test_y(func, xmin, xmax, ymin, ymax, nx, 2 * ny);
		if (test_x.Linf < test_y.Linf) {
			nx *= 2;
			err = test_x.Linf;
			*this = std::move(test_x);
		} else {
			ny *= 2;
			err = test_y.Linf;
			*this = std::move(test_y);
		}
		printf(" %e %e %e %i %i\n", L1, L2, Linf, nx, ny);
	} while (err >= toler);
	if (filename) {
		FILE* fp = fopen(filename, "wt");
		for (real x = xmin + dx / 2.0; x < xmax; x += dx) {
			for (real y = ymin + dy / 2.0; y < ymax; y += dy) {
				fprintf(fp, "%e %e %e %e\n", x, y, (*this)(x, y), func(x, y));
			}
		}
		fclose(fp);
	}
}

bicubic_table::bicubic_table(const std::function<real(real, real)>& func,
		real _xmin, real _xmax, real _ymin, real _ymax, int _NX, int _NY) :
		xmin(_xmin), xmax(_xmax), ymin(_ymin), ymax(_ymax), NX(_NX), NY(_NY), C(
				_NX * _NY) {
	std::vector<real> data((NY + 1) * (NX + 1));
	real x, y;
	dx = (xmax - xmin) / real(NX);
	dy = (ymax - ymin) / real(NY);
	for (int iy = 0; iy <= NY; iy++) {
		y = ymin + iy * dy;
		for (int ix = 0; ix <= NX; ix++) {
			x = xmin + ix * dx;
			const real value = func(x, y);
			data[ix + iy * (NX + 1)] = value;
		}
	}
	for (int iy = 1; iy < NY - 1; iy++) {
		for (int ix = 1; ix < NX - 1; ix++) {
			int i2 = ix + iy * (NX);
			for (int j = 0; j < 16; j++) {
				int k = 0;
				C[i2][j] = 0.0;
				for (int kx = 0; kx < 4; kx++) {
					for (int ky = 0; ky < 4; ky++) {

						C[i2][j] +=
								W[j][k]
										* data[(ix - 1 + kx)
												+ (iy - 1 + ky) * (NX + 1)];
						k++;
					}
				}

			}
		}
	}
	L1 = L2 = 0.0;
	Linf = 0.0;
	int NS = NX * NY;
	real norm = 0.0;
	for (int i = 0; i < NS; i++) {
		real x = xmin + rand1() * (xmax - xmin);
		real y = ymin + rand1() * (ymax - ymin);
		real exact = func(x, y);
		real interp = (*this)(x, y);
		norm += std::abs(exact);
		real dif = std::abs(exact - interp);
		L1 += dif;
		L2 += dif * dif;
		Linf = std::max(Linf, dif);
	}
	L1 /= norm;
	L2 /= norm * norm;
	L2 = std::sqrt(L2);
	Linf /= norm;

}

bool bicubic_table::in_range(real x, real y) const {
	if (x < xmin || y < ymin || x >= xmax || y >= ymax) {
		return false;
	}
	return true;
}

real bicubic_table::operator()(real x, real y) const {
	int xi = std::min(std::max(1, int((x - xmin) / dx)), NX - 2);
	int yi = std::min(std::max(1, int((y - ymin) / dy)), NY - 2);
	if (x < xmin || y < ymin || x >= xmax || y >= ymax) {
		printf("Interpolation request out of range\n");
		printf("%e %e\n", x, y);
		abort();
	}
	x -= xmin + (xi + 0.5) * dx;
	y -= ymin + (yi + 0.5) * dy;
	x /= dx;
	y /= dy;
	const auto& c = C[xi + yi * NX];
	real y0, x0;
	real sum = 0.0;
	int k = 0;
	y0 = 1.0;
	for (int ky = 0; ky < 4; ky++) {
		x0 = 1.0;
		for (int kx = 0; kx < 4; kx++) {
			sum += c[k] * x0 * y0;
			x0 *= x;
			k++;
		}
		y0 *= y;
	}
	return sum;
}

